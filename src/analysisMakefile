SHELL:=/bin/bash -e
export SHELLOPTS=pipefail
# dent earl, dearl (a) soe ucsc edu
# 11 April 2011
##############################
# Copyright (C) 2009-2011 by 
# Dent Earl (dearl@soe.ucsc.edu, dent.earl@gmail.com)
# Benedict Paten (benedict@soe.ucsc.edu, benedict.paten@gmail.com)
# Mark Diekhans (markd@soe.ucsc.edu)
# ... and other members of the Reconstruction Team of David Haussler's 
# lab (BME Dept. UCSC).
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
##############################
# These two directories can come from the assemblAnalysis project:
binDir:=~/assemblathon/assemblAnalysis/bin
extraDir:=~/assemblathon/assemblAnalysis/extra
#####
projectDir:=.
resultsDir:=${projectDir}/publication
# THESE 3 FILES ARE EXTERNAL DEPENDENCIES
fltpage:=~/assemblathon/latexSupplemental/trunk/fltpage.sty
simulationStatsTab:=${extraDir}/simulationTable.tab
participantsTableTex:=${extraDir}/participantsTable.tex
#####
chrNames:= chr0,chr1,chr2
hap1ChrLengths:= 76252953,18509915,17699484
hap2ChrLengths:= 76285600,18539192,17710169
bacChrLength:= 4747819
####################
tablesDir:=${resultsDir}/tables
copyNumberPlotsDir:=${resultsDir}/copyNumberPlots
contiguousPlotsDir:=${resultsDir}/contiguousPlots
coverageSFDir:=${resultsDir}/coverageStackFillPlots
correlationsDir:=${projectDir}/correlations
hap1WPSDir:=${projectDir}/picklesMafsScaffoldsHap1
hap1WPCDir:=${projectDir}/picklesMafsContigsHap1
hap1AWPDir:=${projectDir}/picklesAnnotsHap1
hap2WPSDir:=${projectDir}/picklesMafsScaffoldsHap2
hap2WPCDir:=${projectDir}/picklesMafsContigsHap2
hap2AWPDir:=${projectDir}/picklesAnnotsHap2
bacWPSDir:=${projectDir}/picklesMafsScaffoldsBac
bacWPCDir:=${projectDir}/picklesMafsContigsBac
bacAWPDir:=${projectDir}/picklesAnnotsBac
rankingsDir:=${resultsDir}/rankings
rankingsFiles:=$(foreach r,N50_CPNG50.tab N50_SPNG50.tab structuralContigPathErrors.tab contiguousRanks.tab substitutionErrors.tab copyNumberErrors.tab coverageTotal.tab coverageCDS.tab,${rankingsDir}/$r)
hap1CommonCoverageArgs:= --annotPickleDir ${hap1AWPDir} --mafPickleDir ${hap1WPSDir} --chrNames ${chrNames} --chrLengths ${hap1ChrLengths} --referenceGenome hap1 --outFormat all --annotationOrder CDS,UTR,NXE,NGE,island,repeat --annotationCeilings 2000,2000,4000,4200,2000,9000 --subsetFile ${rankingsDir}/subsetTeamTopEntry
hap1CommonCoverageArgsNoSubset:= --showAssemblyNumbers --annotPickleDir ${hap1AWPDir} --mafPickleDir ${hap1WPSDir} --chrNames ${chrNames} --chrLengths ${hap1ChrLengths} --referenceGenome hap1 --outFormat all --annotationOrder CDS,UTR,NXE,NGE,island,repeat --annotationCeilings 2000,2000,4000,4200,2000,9000
hap2CommonCoverageArgs:= --annotPickleDir ${hap2AWPDir} --mafPickleDir ${hap2WPSDir} --chrNames ${chrNames} --chrLengths ${hap2ChrLengths} --referenceGenome hap2 --outFormat all --annotationOrder CDS,UTR,NXE,NGE,island,repeat --annotationCeilings 2000,2000,4000,4200,2000,9000 --subsetFile ${rankingsDir}/subsetTeamTopEntry
hap2CommonCoverageArgsNoSubset:= --showAssemblyNumbers --annotPickleDir ${hap2AWPDir} --mafPickleDir ${hap2WPSDir} --chrNames ${chrNames} --chrLengths ${hap2ChrLengths} --referenceGenome hap2 --outFormat all --annotationOrder CDS,UTR,NXE,NGE,island,repeat --annotationCeilings 2000,2000,4000,4200,2000,9000
bacCommonCoverageArgs:= --annotPickleDir ${bacAWPDir} --mafPickleDir ${bacWPSDir} --chrNames bac --chrLengths ${bacChrLength} --referenceGenome bac --outFormat all --annotationOrder repeat --annotationCeilings 50 --subsetFile ${rankingsDir}/subsetTeamTopEntry
bacCommonCoverageArgsNoSubset:= --showAssemblyNumbers --annotPickleDir ${bacAWPDir} --mafPickleDir ${bacWPSDir} --chrNames bac --chrLengths ${bacChrLength} --referenceGenome bac --outFormat all --annotationOrder repeat --annotationCeilings 50
##############################

.SECONDARY: # leave this blank to force make to keep intermediate files
.PHONY: all clean

all: mafWigPicks annotationWigPicks ${rankingsDir}/subsetTeamTopEntry copyNumberPlots contiguousPlots covStackFillPlots ${resultsDir}/mainFigs/n50statsFacets.pdf ${resultsDir}/mainFigs/contiguousStatsFacets.pdf ${resultsDir}/mainFigs/copyNumberFacetLinear.pdf ${resultsDir}/mainFigs/subStatsFacets.pdf ${tablesDir}/rankingSummaryTable.pdf ${tablesDir}/rankingSummaryTableTeams.pdf ${tablesDir}/contigPathStatsTable.pdf ${tablesDir}/coverageRankingTableTeams.pdf ${tablesDir}/coverageRankingTable.pdf ${tablesDir}/fltpage.sty ${tablesDir}/simulationSummaryTable.pdf ${tablesDir}/participantsTable.pdf ${correlationsDir}/correlationsPlot.pdf ${projectDir}/nNGDiffs/scaffoldNNGAbsDiffBp.txt ${projectDir}/nNGDiffs/scaffoldNNGAbsDiffPercent.txt ${projectDir}/nNGDiffs/contigNNGAbsDiffBp.txt ${projectDir}/nNGDiffs/contigNNGAbsDiffPercent.txt 
	@echo Work Complete.

clean:
	rm -rf ${resultsDir}

# outside dependency, fltpage.sty must be supplied
${tablesDir}/fltpage.sty: ${fltpage}
	mkdir -p $(dir $@)
	cp $< $@.tmp
	mv $@.tmp $@

# maf wigPickle files (for coverage stack fill plots)
mafWigPicks: contigMafWigPicks scaffoldMafWigPicks
contigMafWigPicks: hap1ContigMafWigPicks hap2ContigMafWigPicks bacContigMafWigPicks
hap1ContigMafWigPicks: $(foreach a,$(subst .maf,,$(notdir $(wildcard ${projectDir}/mafsContigs/*))),${hap1WPCDir}/hap1.$a.maf.pickle)
hap2ContigMafWigPicks: $(foreach a,$(subst .maf,,$(notdir $(wildcard ${projectDir}/mafsContigs/*))),${hap2WPCDir}/hap2.$a.maf.pickle)
bacContigMafWigPicks: $(foreach a,$(subst .maf,,$(notdir $(wildcard ${projectDir}/mafsContigs/*))),${bacWPCDir}/bac.$a.maf.pickle)
scaffoldMafWigPicks: hap1ScaffoldMafWigPicks hap2ScaffoldMafWigPicks bacScaffoldMafWigPicks
hap1ScaffoldMafWigPicks: $(foreach a,$(subst .maf,,$(notdir $(wildcard ${projectDir}/mafsScaffolds/*))),${hap1WPSDir}/hap1.$a.maf.pickle)
hap2ScaffoldMafWigPicks: $(foreach a,$(subst .maf,,$(notdir $(wildcard ${projectDir}/mafsScaffolds/*))),${hap2WPSDir}/hap2.$a.maf.pickle)
bacScaffoldMafWigPicks: $(foreach a,$(subst .maf,,$(notdir $(wildcard ${projectDir}/mafsScaffolds/*))),${bacWPSDir}/bac.$a.maf.pickle)
${hap1WPSDir}/hap1.%.maf.pickle: ${projectDir}/mafsScaffolds/%.maf ${binDir}/mafToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/mafToPlotPickles.py --maf $< --referenceGenome hap1 --comparisonGenome $* \
		--outDir $(dir $@) --name hap1Tmp.$* --chrNames ${chrNames} --chrLengths ${hap1ChrLengths} --verify
	mv ${hap1WPSDir}/hap1Tmp.$*.maf.pickle $@
${hap1WPCDir}/hap1.%.maf.pickle: ${projectDir}/mafsContigs/%.maf ${binDir}/mafToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/mafToPlotPickles.py --maf $< --referenceGenome hap1 --comparisonGenome $* \
		--outDir $(dir $@) --name hap1Tmp.$* --chrNames ${chrNames} --chrLengths ${hap1ChrLengths} --verify
	mv ${hap1WPCDir}/hap1Tmp.$*.maf.pickle $@
${hap2WPSDir}/hap2.%.maf.pickle: ${projectDir}/mafsScaffolds/%.maf ${binDir}/mafToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/mafToPlotPickles.py --maf $< --referenceGenome hap2 --comparisonGenome $* \
		--outDir $(dir $@) --name hap2Tmp.$* --chrNames ${chrNames} --chrLengths ${hap2ChrLengths} --verify
	mv ${hap2WPSDir}/hap2Tmp.$*.maf.pickle $@
${hap2WPCDir}/hap2.%.maf.pickle: ${projectDir}/mafsContigs/%.maf ${binDir}/mafToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/mafToPlotPickles.py --maf $< --referenceGenome hap2 --comparisonGenome $* \
		--outDir $(dir $@) --name hap2Tmp.$* --chrNames ${chrNames} --chrLengths ${hap2ChrLengths} --verify
	mv ${hap2WPCDir}/hap2Tmp.$*.maf.pickle $@
${bacWPSDir}/bac.%.maf.pickle: ${projectDir}/mafsScaffolds/%.maf ${binDir}/mafToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/mafToPlotPickles.py --maf $< --referenceGenome bac --comparisonGenome $* \
		--outDir $(dir $@) --name bacTmp.$* --chrNames bac --chrLengths ${bacChrLength} --verify
	mv ${bacWPSDir}/bacTmp.$*.maf.pickle $@
${bacWPCDir}/bac.%.maf.pickle: ${projectDir}/mafsContigs/%.maf ${binDir}/mafToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/mafToPlotPickles.py --maf $< --referenceGenome bac --comparisonGenome $* \
		--outDir $(dir $@) --name bacTmp.$* --chrNames bac --chrLengths ${bacChrLength} --verify
	mv ${bacWPCDir}/bacTmp.$*.maf.pickle $@

# annotation wigPickle files (for coverage stack fill plots)
annotationWigPicks:  ${hap1AWPDir}/hap1.annots.pickle ${hap2AWPDir}/hap2.annots.pickle ${bacAWPDir}/bac.annots.pickle
${hap1AWPDir}/hap1.annots.pickle: ${projectDir}/annotations/hap1.annots.trf.repmask.gff ${binDir}/gffToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/gffToPlotPickles.py --gff $< \
		--outDir $(dir $@) --prefix hap1Tmp --chrNames ${chrNames} \
		--chrLengths ${hap1ChrLengths}
	mv ${hap1AWPDir}/hap1Tmp.annots.pickle $@
${hap2AWPDir}/hap2.annots.pickle: ${projectDir}/annotations/hap2.annots.trf.repmask.gff ${binDir}/gffToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/gffToPlotPickles.py --gff $< \
		--outDir $(dir $@) --prefix hap2Tmp --chrNames ${chrNames} \
		--chrLengths ${hap2ChrLengths}
	mv ${hap2AWPDir}/hap2Tmp.annots.pickle $@
${bacAWPDir}/bac.annots.pickle: ${projectDir}/annotations/bac.annots.trf.repmask.gff ${binDir}/gffToPlotPickles.py
	mkdir -p $(dir $@)
	${binDir}/gffToPlotPickles.py --gff $< \
		--outDir $(dir $@) --prefix bacTmp --chrNames bac --chrLengths ${bacChrLength}
	mv ${bacAWPDir}/bacTmp.annots.pickle $@

# coverage stack fill plots:
covStackFillPlots: covSFPHap1 covSFPHap2 covSFPBac
covSFPHap1: $(foreach p,hap1 hap1Fill hap1BED hap1StackFillBlocks hap1CP hap1StackFillContigPaths hap1StackFillContigs hap1StackFillScaffPaths, ${coverageSFDir}/$p.pdf)
covSFPHap2: $(foreach p,hap2 hap2Fill hap2BED hap2StackFillBlocks hap2CP hap2StackFillContigPaths hap2StackFillContigs hap2StackFillScaffPaths, ${coverageSFDir}/$p.pdf)
covSFPBac: $(foreach p,bac bacFill bacBED bacStackFillBlocks bacCP bacStackFillContigPaths, ${coverageSFDir}/$p.pdf)
# haplotype 1
${coverageSFDir}/hap1.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@)
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1Tmp.$$p ${coverageSFDir}/hap1.$$p ; \
	done
${coverageSFDir}/all_hap1.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@)
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1Tmp.$$p ${coverageSFDir}/all_hap1.$$p ; \
	done
${coverageSFDir}/hap1Fill.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --fill
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1FillTmp.$$p ${coverageSFDir}/hap1Fill.$$p ; \
	done
${coverageSFDir}/all_hap1Fill.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --fill
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1FillTmp.$$p ${coverageSFDir}/all_hap1Fill.$$p ; \
	done
${coverageSFDir}/hap1BED.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --edgeErrorCeiling 300
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1BEDTmp.$$p ${coverageSFDir}/hap1BED.$$p ; \
	done
${coverageSFDir}/all_hap1BED.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --edgeErrorCeiling 300
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1BEDTmp.$$p ${coverageSFDir}/all_hap1BED.$$p ; \
	done
${coverageSFDir}/hap1StackFillBlocks.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillBlocks 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1StackFillBlocksTmp.$$p ${coverageSFDir}/hap1StackFillBlocks.$$p ; \
	done
${coverageSFDir}/all_hap1StackFillBlocks.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*)  ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillBlocks 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1StackFillBlocksTmp.$$p ${coverageSFDir}/all_hap1StackFillBlocks.$$p ; \
	done
${coverageSFDir}/hap1CP.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --contigPathErrorDensity --contigPathEdgeDensity \
		--edgeErrorCeiling 30
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1CPTmp.$$p ${coverageSFDir}/hap1CP.$$p ; \
	done
${coverageSFDir}/all_hap1CP.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*)  ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --contigPathErrorDensity --contigPathEdgeDensity \
		--edgeErrorCeiling 30
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1CPTmp.$$p ${coverageSFDir}/all_hap1CP.$$p ; \
	done
${coverageSFDir}/hap1StackFillContigPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1StackFillContigPathsTmp.$$p ${coverageSFDir}/hap1StackFillContigPaths.$$p ; \
	done
${coverageSFDir}/all_hap1StackFillContigPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*)  ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1StackFillContigPathsTmp.$$p ${coverageSFDir}/all_hap1StackFillContigPaths.$$p ; \
	done
${coverageSFDir}/hap1StackFillContigs.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ContigMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py --annotPickleDir ${hap1AWPDir}/ \
		--mafPickleDir ${hap1WPCDir} --chrNames ${chrNames} \
		--chrLengths ${hap1ChrLengths} --referenceGenome hap1 --outFormat all \
		--annotationOrder CDS,UTR,NXE,NGE,island,repeat \
		--annotationCeilings 2000,2000,4000,4200,2000,9000 --subsetFile ${rankingsDir}/subsetTeamTopEntry \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigs 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1StackFillContigsTmp.$$p ${coverageSFDir}/hap1StackFillContigs.$$p ; \
	done
${coverageSFDir}/all_hap1StackFillContigs.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${hap1AWPDir}/hap1.annots.pickle hap1ContigMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py --annotPickleDir ${hap1AWPDir}/ \
		--mafPickleDir ${hap1WPCDir} --chrNames ${chrNames} \
		--chrLengths ${hap1ChrLengths} --referenceGenome hap1 --outFormat all \
		--annotationOrder CDS,UTR,NXE,NGE,island,repeat \
		--annotationCeilings 2000,2000,4000,4200,2000,9000 \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigs 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1StackFillContigsTmp.$$p ${coverageSFDir}/all_hap1StackFillContigs.$$p ; \
	done
${coverageSFDir}/hap1StackFillScaffPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillScaffPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap1StackFillScaffPathsTmp.$$p ${coverageSFDir}/hap1StackFillScaffPaths.$$p ; \
	done
${coverageSFDir}/all_hap1StackFillScaffPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap1WPSDir}/*) ${hap1AWPDir}/hap1.annots.pickle hap1ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap1CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillScaffPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap1StackFillScaffPathsTmp.$$p ${coverageSFDir}/all_hap1StackFillScaffPaths.$$p ; \
	done
# haplotype 2
${coverageSFDir}/hap2.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2Tmp.$$p ${coverageSFDir}/hap2.$$p ; \
	done
${coverageSFDir}/all_hap2.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*)  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2Tmp.$$p ${coverageSFDir}/all_hap2.$$p ; \
	done
${coverageSFDir}/hap2Fill.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --fill
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2FillTmp.$$p ${coverageSFDir}/hap2Fill.$$p ; \
	done
${coverageSFDir}/all_hap2Fill.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --fill
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2FillTmp.$$p ${coverageSFDir}/all_hap2Fill.$$p ; \
	done
${coverageSFDir}/hap2BED.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --edgeErrorCeiling 300
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2BEDTmp.$$p ${coverageSFDir}/hap2BED.$$p ; \
	done
${coverageSFDir}/all_hap2BED.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --edgeErrorCeiling 300
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2BEDTmp.$$p ${coverageSFDir}/all_hap2BED.$$p ; \
	done
${coverageSFDir}/hap2StackFillBlocks.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillBlocks 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2StackFillBlocksTmp.$$p ${coverageSFDir}/hap2StackFillBlocks.$$p ; \
	done
${coverageSFDir}/all_hap2StackFillBlocks.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillBlocks 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2StackFillBlocksTmp.$$p ${coverageSFDir}/all_hap2StackFillBlocks.$$p ; \
	done
${coverageSFDir}/hap2CP.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --contigPathErrorDensity --contigPathEdgeDensity \
		--edgeErrorCeiling 30
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2CPTmp.$$p ${coverageSFDir}/hap2CP.$$p ; \
	done
${coverageSFDir}/all_hap2CP.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --contigPathErrorDensity --contigPathEdgeDensity \
		--edgeErrorCeiling 30
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2CPTmp.$$p ${coverageSFDir}/all_hap2CP.$$p ; \
	done
${coverageSFDir}/hap2StackFillContigPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2StackFillContigPathsTmp.$$p ${coverageSFDir}/hap2StackFillContigPaths.$$p ; \
	done
${coverageSFDir}/all_hap2StackFillContigPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2StackFillContigPathsTmp.$$p ${coverageSFDir}/all_hap2StackFillContigPaths.$$p ; \
	done
${coverageSFDir}/hap2StackFillContigs.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ContigMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py --annotPickleDir ${hap2AWPDir}/ \
		--mafPickleDir ${hap2WPCDir} --chrNames ${chrNames} \
		--chrLengths ${hap2ChrLengths} --referenceGenome hap2 --outFormat all \
		--annotationOrder CDS,UTR,NXE,NGE,island,repeat \
		--annotationCeilings 2000,2000,4000,4200,2000,9000 --subsetFile ${rankingsDir}/subsetTeamTopEntry \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigs 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2StackFillContigsTmp.$$p ${coverageSFDir}/hap2StackFillContigs.$$p ; \
	done
${coverageSFDir}/all_hap2StackFillContigs.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${hap2AWPDir}/hap2.annots.pickle hap2ContigMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py --annotPickleDir ${hap2AWPDir}/ \
		--mafPickleDir ${hap2WPCDir} --chrNames ${chrNames} \
		--chrLengths ${hap2ChrLengths} --referenceGenome hap2 --outFormat all \
		--annotationOrder CDS,UTR,NXE,NGE,island,repeat \
		--annotationCeilings 2000,2000,4000,4200,2000,9000 \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigs 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2StackFillContigsTmp.$$p ${coverageSFDir}/all_hap2StackFillContigs.$$p ; \
	done
${coverageSFDir}/hap2StackFillScaffPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${rankingsDir}/subsetTeamTopEntry  ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillScaffPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/hap2StackFillScaffPathsTmp.$$p ${coverageSFDir}/hap2StackFillScaffPaths.$$p ; \
	done
${coverageSFDir}/all_hap2StackFillScaffPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${hap2WPSDir}/*) ${hap2AWPDir}/hap2.annots.pickle hap2ScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${hap2CommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillScaffPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_hap2StackFillScaffPathsTmp.$$p ${coverageSFDir}/all_hap2StackFillScaffPaths.$$p ; \
	done
# bacterial
${coverageSFDir}/bac.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/bacTmp.$$p ${coverageSFDir}/bac.$$p ; \
	done
${coverageSFDir}/all_bac.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_bacTmp.$$p ${coverageSFDir}/all_bac.$$p ; \
	done
${coverageSFDir}/bacFill.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --fill
	for p in png eps pdf; do \
		mv ${coverageSFDir}/bacFillTmp.$$p ${coverageSFDir}/bacFill.$$p ; \
	done
${coverageSFDir}/all_bacFill.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --fill
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_bacFillTmp.$$p ${coverageSFDir}/all_bacFill.$$p ; \
	done
${coverageSFDir}/bacBED.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --edgeErrorCeiling 300
	for p in png eps pdf; do \
		mv ${coverageSFDir}/bacBEDTmp.$$p ${coverageSFDir}/bacBED.$$p ; \
	done
${coverageSFDir}/all_bacBED.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --edgeErrorCeiling 300
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_bacBEDTmp.$$p ${coverageSFDir}/all_bacBED.$$p ; \
	done
${coverageSFDir}/bacStackFillBlocks.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillBlocks 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/bacStackFillBlocksTmp.$$p ${coverageSFDir}/bacStackFillBlocks.$$p ; \
	done
${coverageSFDir}/all_bacStackFillBlocks.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillBlocks 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_bacStackFillBlocksTmp.$$p ${coverageSFDir}/all_bacStackFillBlocks.$$p ; \
	done
${coverageSFDir}/bacCP.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --contigPathErrorDensity --contigPathEdgeDensity \
		--edgeErrorCeiling 30
	for p in png eps pdf; do \
		mv ${coverageSFDir}/bacCPTmp.$$p ${coverageSFDir}/bacCP.$$p ; \
	done
${coverageSFDir}/all_bacCP.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --contigPathErrorDensity --contigPathEdgeDensity \
		--edgeErrorCeiling 30
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_bacCPTmp.$$p ${coverageSFDir}/all_bacCP.$$p ; \
	done
${coverageSFDir}/bacStackFillContigPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${rankingsDir}/subsetTeamTopEntry ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgs} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/bacStackFillContigPathsTmp.$$p ${coverageSFDir}/bacStackFillContigPaths.$$p ; \
	done
${coverageSFDir}/all_bacStackFillContigPaths.pdf: ${binDir}/plotPicklesToPlot.py $(wildcard ${bacWPSDir}/*) ${bacAWPDir}/bac.annots.pickle bacScaffoldMafWigPicks
	mkdir -p $(dir $@)
	${binDir}/plotPicklesToPlot.py ${bacCommonCoverageArgsNoSubset} \
		--out $(subst .pdf,Tmp.pdf,$@) --stackFillContigPaths 
	for p in png eps pdf; do \
		mv ${coverageSFDir}/all_bacStackFillContigPathsTmp.$$p ${coverageSFDir}/all_bacStackFillContigPaths.$$p ; \
	done

# n50 facetPlot
${resultsDir}/mainFigs/n50statsFacets.pdf: ${binDir}/createN50StatsPlot.py $(wildcard ${projectDir}/statsScaffoldsContigPath/*) ${rankingsDir}/subsetTeamTopEntry
	mkdir -p $(dir $@)
	${binDir}/createN50StatsPlot.py --statsScaffoldsContigPathDir ${projectDir}/statsScaffoldsContigPath/ \
		--statsContigsContigPathDir ${projectDir}/statsContigsContigPath/ \
		--out ${resultsDir}/mainFigs/n50statsFacetsTmp.pdf --outFormat pdf --sortOn scaffoldPathNG50 \
		--subsetFile ${rankingsDir}/subsetTeamTopEntry --title 'N50 Statistics'
	mv ${resultsDir}/mainFigs/n50statsFacetsTmp.pdf $@

# contiguous individual plots
contiguousPlots: $(foreach f,$(wildcard ${projectDir}/statsScaffoldsContiguity/*.xml),$(join ${contiguousPlotsDir}/, $(subst xml,pdf,$(notdir $f)) ))

# contiguous individual plots
${contiguousPlotsDir}/%.contiguousStats.pdf: ${projectDir}/statsScaffoldsContiguity/%.contiguousStats.xml ${binDir}/createContiguousStatsPlot.py
	mkdir -p $(dir $@)
	${binDir}/createContiguousStatsPlot.py --title "$$(echo $* | ${binDir}/replaceIDsWithNames.py --retainNumber ) Contiguity Statistics" \
		--out ${contiguousPlotsDir}/$*.contiguousStats.tmp.pdf --outFormat pdf $<
	mv ${contiguousPlotsDir}/$*.contiguousStats.tmp.pdf $@

# contiguous facet plot
${resultsDir}/mainFigs/contiguousStatsFacets.pdf: ${binDir}/createContiguousStatsPlot.py $(wildcard ${projectDir}/statsScaffoldsContiguity/*) ${rankingsDir}/subsetTeamTopEntry
	mkdir -p $(dir $@)
	${binDir}/createContiguousStatsPlot.py --out ${resultsDir}/mainFigs/contiguousStatsFacetsTmp --outFormat pdf \
		--title 'Contiguity Statistics' ${projectDir}/statsScaffoldsContiguity/* --subsetFile ${rankingsDir}/subsetTeamTopEntry
	mv ${resultsDir}/mainFigs/contiguousStatsFacetsTmp.pdf $@

# copy number individual plots
${copyNumberPlotsDir}/%.pdf: ${projectDir}/statsScaffoldsCopyNumber/%.xml ${binDir}/createCopyNumberStatsPlot.py
	mkdir -p $(dir $@)
	${binDir}/createCopyNumberStatsPlot.py --title "$$(echo $* | perl -ple 's/\.copyNumber\_\d+//' | ${binDir}/replaceIDsWithNames.py --retainNumber ) Copy Number Statistics" \
		--out ${copyNumberPlotsDir}/$*.tmp.pdf --outFormat pdf $<
	mv ${copyNumberPlotsDir}/$*.tmp.pdf $@
# copy number individual plots
copyNumberPlots: $(foreach f,$(wildcard ${projectDir}/statsScaffoldsCopyNumber/*.xml), $(join ${copyNumberPlotsDir}/, $(subst xml,pdf, $(notdir $f)) ))

# copy number facet plot
${resultsDir}/mainFigs/copyNumberFacetLinear.pdf: ${binDir}/createCopyNumberStatsFacetedPlot.py $(wildcard ${projectDir}/statsScaffoldsCopyNumber/*) ${rankingsDir}/subsetTeamTopEntry
	mkdir -p $(dir $@)
	${binDir}/createCopyNumberStatsFacetedPlot.py --dir ${projectDir}/statsScaffoldsCopyNumber/ \
		--subsetFile ${rankingsDir}/subsetTeamTopEntry --out ${resultsDir}/mainFigs/copyNumberFacetLinearTmp --outFormat pdf
	mv ${resultsDir}/mainFigs/copyNumberFacetLinearTmp.pdf $@

# substitution stats facet plot
${resultsDir}/mainFigs/subStatsFacets.pdf: ${binDir}/createSubStatsPlot.py $(wildcard ${projectDir}/statsScaffoldsSubstitutions/*) ${rankingsDir}/subsetTeamTopEntry
	mkdir -p $(dir $@)
	${binDir}/createSubStatsPlot.py --subStatsDir ${projectDir}/statsScaffoldsSubstitutions/ --subsetFile \
		${rankingsDir}/subsetTeamTopEntry --out ${resultsDir}/mainFigs/subStatsFacetsTmp --outFormat pdf
	mv ${resultsDir}/mainFigs/subStatsFacetsTmp.pdf $@

# hap1 coverage rankings
${rankingsDir}/coverageHap1.txt: ${binDir}/extractPlotPickleCounts.py $(wildcard ${hap1WPSDir}/*)  mafWigPicks
	mkdir -p $(dir $@)
	for f in ${hap1WPSDir}/*.pickle ; do \
		a=$$(basename $$f | perl -ple 's/^hap\d\.(.{2,3})\..*/$$1/;') ; \
		echo $$a $$( ${binDir}/extractPlotPickleCounts.py --key columnsInBlocks \
		${hap1WPSDir}/hap1.$$a.* | awk '{sum += $$1} END{ print sum }' ) \
		$$( echo $$( ${binDir}/extractPlotPickleCounts.py --key columnsInBlocks \
		${hap1WPSDir}/hap1.$$a.* | awk '{sum += $$1} END{ print sum }' )/112462352 | bc -l ) >> $@.tmp ; \
		done
	mv $@.tmp $@
# hap2 coverage rankings
${rankingsDir}/coverageHap2.txt: ${binDir}/extractPlotPickleCounts.py $(wildcard ${hap2WPSDir}/*) mafWigPicks
	mkdir -p $(dir $@)
	for f in ${hap2WPSDir}/*.pickle ; do \
		a=$$(basename $$f | perl -ple 's/^hap\d\.(.{2,3})\..*/$$1/;') ; \
		echo $$a $$( ${binDir}/extractPlotPickleCounts.py --key columnsInBlocks \
		${hap2WPSDir}/hap2.$$a.* | awk '{sum += $$1} END{ print sum }' ) \
		$$( echo $$( ${binDir}/extractPlotPickleCounts.py --key columnsInBlocks \
		${hap2WPSDir}/hap2.$$a.* | awk '{sum += $$1} END{ print sum }' )/112462352 | bc -l ) >> $@.tmp ; \
		done
	mv $@.tmp $@
# bac coverage rankings
${rankingsDir}/coverageBac.txt: ${binDir}/extractPlotPickleCounts.py $(wildcard ${bacWPSDir}/*) mafWigPicks
	mkdir -p $(dir $@)
	for f in ${bacWPSDir}/*.pickle ; do \
		a=$$(basename $$f | perl -ple 's/^bac\.(.{2,3})\..*/$$1/;') ; \
		echo $$a $$( ${binDir}/extractPlotPickleCounts.py --key columnsInBlocks \
		${bacWPSDir}/bac.$$a.* | awk '{sum += $$1} END{ print sum }' ) $$( echo \
		$$( ${binDir}/extractPlotPickleCounts.py --key columnsInBlocks \
		${bacWPSDir}/bac.$$a.* | awk '{sum += $$1} END{ print sum }' )/112462352 | bc -l ) >> $@.tmp ; \
		done
	mv $@.tmp $@
# unmapped rankings
${rankingsDir}/unmapped.txt: $(wildcard ${projectDir}/statsScaffoldsAggregateColumns/*blocks_haplotypes_agg.txt)
	mkdir -p $(dir $@)
	for f in statsScaffoldsAggregateColumns/*blocks_haplotypes_agg.txt; do \
		echo -e "$$(basename $$f | sed 's/.blocks_haplotypes_agg.txt//')\t"\
		$$( grep '!hap1/!hap2/assembly' $$f | perl -ple 's/\s+/\n/g;' | sort -n | tail -1) >> $@.tmp; done
	mv $@.tmp $@

# total coverage ranking
${rankingsDir}/coverageTotal.tab: ${rankingsDir}/coverageHap1.txt ${rankingsDir}/coverageHap2.txt ${rankingsDir}/coverageBac.txt ${rankingsDir}/unmapped.txt ${extraDir}/cdsCoverage.tab
	mkdir -p $(dir $@)
	join ${rankingsDir}/coverageHap1.txt ${rankingsDir}/coverageHap2.txt | join - ${rankingsDir}/coverageBac.txt | \
		join - ${extraDir}/cdsCoverage.tab | join - ${rankingsDir}/unmapped.txt > ${rankingsDir}/coverageTotal.txt
	echo -e '#Assembly\tHap Total (%)\tHap \(\\alpha_1\) (%)\tHap \(\\alpha_2\) (%)\tBac (%)\tCDS (%)\tUnmapped' > ${rankingsDir}/coverageTotalSummary.tab
	cat ${rankingsDir}/coverageTotal.txt |\
		awk '{printf "%s\t%.1f\t%.1f\t%.1f\t%.1f\t%.1f\t%.3e\n", $$1, (($$2+$$4)/2249973.13), $$2/1124623.52, $$4/1125349.61, $$6/47478.19, $$9, $$11}' >>\
		${rankingsDir}/coverageTotalSummary.tab
	awk 'NR==1; NR>1 {print $$0 | "sort -rn -k2"}' ${rankingsDir}/coverageTotalSummary.tab | \
		awk 'NR==1; NR>1 {printf "%s\t%.1f\t%.1f\t%.1f\t%.1f\t%.1f\t%.3e\n", $$1, $$2, $$3, $$4, $$5, $$6, $$7}'  > $@.tmp
	rm ${rankingsDir}/coverageTotalSummary.tab
	mv $@.tmp $@
# CDS coverage ranking
${rankingsDir}/coverageCDS.tab: ${rankingsDir}/coverageTotal.tab
	cat $< | awk 'NR==1; NR>1{ print $$0 | "sort -rn -k6" }' | awk --field-separator '\t' '{print $$1, $$6}' |\
		awk --field-separator '\t' '{print $$1 "\t" $$6}' > $@.tmp
	mv $@.tmp $@

# coverage rankings table, all
${tablesDir}/coverageRankingTable.pdf: ${rankingsDir}/coverageTotal.tab ${binDir}/tab2tex.py ${binDir}/latexWrapper.py ${tablesDir}/fltpage.sty
	mkdir -p $(dir $@)
	cat ${rankingsDir}/coverageTotal.tab | sed 's/Assembly/ID/;' | ${binDir}/tab2tex.py --columnTitleCharLimit 20 --partitionEvery 10 | \
		${binDir}/replaceIDsWithNames.py --retainNumber | ${binDir}/latexWrapper.py > ${tablesDir}/coverageRankingTableTmp.tex
	pushd ${tablesDir} && latex coverageRankingTableTmp.tex && latex coverageRankingTableTmp.tex \
		latex coverageRankingTableTmp.tex && dvips -Ppdf coverageRankingTableTmp.dvi && \
		ps2pdf coverageRankingTableTmp.ps && popd
	mv ${tablesDir}/coverageRankingTableTmp.pdf $@
# coverage rankings table, subset
${tablesDir}/coverageRankingTableTeams.pdf: ${rankingsDir}/coverageTotal.tab ${binDir}/tab2tex.py ${binDir}/latexWrapper.py ${binDir}/subsetTabs.py ${rankingsDir}/subsetTeamTopEntry ${tablesDir}/fltpage.sty
	mkdir -p $(dir $@)
	cat ${rankingsDir}/coverageTotal.tab | perl -ple 's/[ ]\d+\t/\t/' | ${binDir}/subsetTabs.py --subsetFile \
		${rankingsDir}/subsetTeamTopEntry | sed 's/Assembly/ID/;' | ${binDir}/tab2tex.py --columnTitleCharLimit 20 --partitionEvery 5 | \
		${binDir}/replaceIDsWithNames.py | ${binDir}/latexWrapper.py > ${tablesDir}/coverageRankingTableTeamsTmp.tex
	pushd ${tablesDir} && latex coverageRankingTableTeamsTmp.tex && latex coverageRankingTableTeamsTmp.tex \
		latex coverageRankingTableTeamsTmp.tex && dvips -Ppdf coverageRankingTableTeamsTmp.dvi && \
		ps2pdf coverageRankingTableTeamsTmp.ps && popd
	mv ${tablesDir}/coverageRankingTableTeamsTmp.pdf $@

# Contig Path (haplotype path) / structural error table
${tablesDir}/contigPathStatsTable.pdf: ${binDir}/createContigPathStatsTable.py ${binDir}/latexWrapper.py ${rankingsDir}/subsetTeamTopEntry $(wildcard ${projectDir}/statsScaffoldsContigPath/*) ${tablesDir}/fltpage.sty
	mkdir -p $(dir $@)
	${binDir}/createContigPathStatsTable.py --subsetFile ${rankingsDir}/subsetTeamTopEntry \
		--statsScaffoldsContigPathDir ${projectDir}/statsScaffoldsContigPath/ \
		--statsContigsContigPathDir ${projectDir}/statsContigsContigPath/ | ${binDir}/latexWrapper.py > \
		${tablesDir}/contigPathStatsTableTmp.tex
	pushd ${tablesDir} && latex contigPathStatsTableTmp.tex && latex contigPathStatsTableTmp.tex \
		latex contigPathStatsTableTmp.tex && dvips -Ppdf contigPathStatsTableTmp.dvi && \
		ps2pdf contigPathStatsTableTmp.ps && popd
	mv ${tablesDir}/contigPathStatsTableTmp.pdf $@

# contiguous rankings
${rankingsDir}/contiguousRanks.tab: ${binDir}/createContiguousStatsPlot.py $(wildcard ${projectDir}/statsScaffoldsContiguity/*)
	mkdir -p $(dir $@)
	${binDir}/createContiguousStatsPlot.py --outputRanks ${projectDir}/statsScaffoldsContiguity/* | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\n",$$1, $$2}' > $@.tmp
	mv $@.tmp $@

# structural (contig path / haplotype path) errors rankings
${rankingsDir}/structuralContigPathErrors.tab: ${binDir}/createContigPathStatsTable.py $(wildcard ${projectDir}/statsScaffoldsContigPath/*)
	mkdir -p $(dir $@)
	${binDir}/createContigPathStatsTable.py --statsScaffoldsContigPath ${projectDir}/statsScaffoldsContigPath/ \
		--statsContigsContigPath ${projectDir}/statsContigsContigPath/ --outputRanks > $@.tmp
	mv $@.tmp $@

# base substitution errors rankings
${rankingsDir}/substitutionErrors.tab: ${binDir}/createSubStatsPlot.py $(wildcard ${projectDir}/statsScaffoldsSubstitutions/*)
	mkdir -p $(dir $@)
	${binDir}/createSubStatsPlot.py --subStatsDir ${projectDir}/statsScaffoldsSubstitutions/ --outputRanks | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\t%.2e\t%.2e\t%.2e\t%.2e\t%.2e\t%.2e\t%.2e\n",$$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9}' > $@.tmp
	mv $@.tmp $@

# copy number errors rankings
${rankingsDir}/copyNumberErrors.tab: ${binDir}/createCopyNumberStatsFacetedPlot.py $(wildcard ${projectDir}/copyNumberStatsScaffolds/*)
	mkdir -p $(dir $@)
	${binDir}/createCopyNumberStatsFacetedPlot.py --dir ${projectDir}/statsScaffoldsCopyNumber --outputRanks | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\t%.2e\t%.2e\t%.2e\t%.2e\t%.2e\n",$$1, $$2, $$3, $$4, $$5, $$6, $$7}' > $@.tmp
	mv $@.tmp $@

# all n50 stats
${rankingsDir}/N50All.txt: ${binDir}/createN50StatsPlot.py $(wildcard ${projectDir}/statsScaffoldsContigPath/*)
	mkdir -p $(dir $@)
	${binDir}/createN50StatsPlot.py --statsScaffoldsContigPathDir ${projectDir}/statsScaffoldsContigPath/ \
		--statsContigsContigPathDir ${projectDir}/statsContigsContigPath/ --outputRanks --sortOn contigNG50 > $@.tmp
	mv $@.tmp $@

# NG50 rankings
${rankingsDir}/N50_NG50.tab: ${rankingsDir}/N50All.txt
	mkdir -p $(dir $@)
	awk -F'\t' '{print $$1,"\t",$$2}' $< | awk 'NR==1; NR>1 {print $$0 | "sort -rn -k2"}' | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\n",$$1, $$2}' > $@.tmp
	mv $@.tmp $@

# contig path N50 rankings
${rankingsDir}/N50_CPNG50.tab: ${rankingsDir}/N50All.txt
	mkdir -p $(dir $@)
	awk -F'\t' '{print $$1,"\t",$$3}' $< | awk 'NR==1; NR>1 {print $$0 | "sort -rn -k2"}' | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\n",$$1, $$2}' > $@.tmp
	mv $@.tmp $@

# scaffold path N50 rankings
${rankingsDir}/N50_SPNG50.tab: ${rankingsDir}/N50All.txt
	mkdir -p $(dir $@)
	awk -F'\t' '{print $$1,"\t",$$4}' $< | awk 'NR==1; NR>1 {print $$0 | "sort -rn -k2"}' | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\n",$$1, $$2}' > $@.tmp
	mv $@.tmp $@

# The top assembly from each team
${rankingsDir}/subsetTeamTopEntry: ${binDir}/summarizeRankings.py ${rankingsFiles} ${binDir}/summarizedRankingToTeamTop.py
	mkdir -p $(dir $@)
	${binDir}/summarizeRankings.py ${rankingsDir}/*tab --mode=s | ${binDir}/summarizedRankingToTeamTop.py | \
		 sed '/^#/d' | sed 's/.contiguousStats.xml//' | awk '{print $$1}' > $@.tmp
	mv $@.tmp $@

# rankings table, all
${tablesDir}/rankingSummaryTable.pdf: ${binDir}/summarizeRankings.py ${rankingsFiles} ${binDir}/tab2tex.py ${tablesDir}/fltpage.sty
	mkdir -p $(dir $@)
	${binDir}/summarizeRankings.py ${rankingsFiles} --retainValues --mode=s | awk 'NR==1; NR>1 {print $$0 | "sort -n -k2"}' | \
	 	sed 's/N50_//g;' | sed '/^$$/d' | sed 's/Assembly/ID/' | sed 's/_/ /g;' | \
		sed 's/ (value)//g;' | sed 's/coverageTotal/Cov. Tot./'| sed 's/contiguousRanks/CC50/' | \
		sed 's/structuralContigPathErrors/Struct./' | sed 's/copyNumberErrors/Copy Num./' | \
		sed 's/substitutionErrors/Subs./' | sed 's/coverageCDS/Cov. CDS/' | ${binDir}/replaceIDsWithNames.py --retainNumber | \
		${binDir}/tab2tex.py --columnTitleCharLimit 20 --partitionEvery 10 > ${tablesDir}/rankingSummaryTable.tex
	pushd ${tablesDir} && ${binDir}/latexWrapper.py < rankingSummaryTable.tex > \
		rankingSummaryTableWrapped.tex && sleep 2 && latex rankingSummaryTableWrapped.tex && latex rankingSummaryTableWrapped.tex \
		latex rankingSummaryTableWrapped.tex && dvips -Ppdf rankingSummaryTableWrapped.dvi && \
		ps2pdf rankingSummaryTableWrapped.ps && popd
	mv ${tablesDir}/rankingSummaryTableWrapped.pdf $@
# rankings table, subset
${tablesDir}/rankingSummaryTableTeams.pdf: ${binDir}/summarizeRankings.py ${rankingsFiles} ${binDir}/summarizedRankingToTeamTop.py ${binDir}/tab2tex.py ${rankingsDir}/subsetTeamTopEntry ${tablesDir}/fltpage.sty
	mkdir -p $(dir $@)
	${binDir}/summarizeRankings.py ${rankingsFiles} --retainValues --mode=s | ${binDir}/summarizedRankingToTeamTop.py --reRank --subsetFile ${rankingsDir}/subsetTeamTopEntry | \
		awk 'NR==1; NR>1 {print $$0 | "sort -n -k2"}' | sed '/^$$/d' | sed 's/N50_//g;' | sed 's/ (value)//g;'| \
		sed 's/coverageTotal/Cov. Tot./'| sed 's/contiguousRanks/CC50/' |\
		sed 's/structuralContigPathErrors/Struct./' | sed 's/copyNumberErrors/Copy Num./' | sed 's/coverageCDS/Cov. CDS/' |\
		sed 's/substitutionErrors/Subs./' | ${binDir}/replaceIDsWithNames.py | ${binDir}/tab2tex.py --columnTitleCharLimit 20 --partitionEvery 5 |\
		sed 's/Assembly/ID/' | sed 's/_/ /g;' > ${tablesDir}/rankingSummaryTableTeams.tex
	pushd ${tablesDir} && ${binDir}/latexWrapper.py < rankingSummaryTableTeams.tex > \
		rankingSummaryTableTeamsWrapped.tex &&  sleep 2 && latex rankingSummaryTableTeamsWrapped.tex && latex rankingSummaryTableTeamsWrapped.tex \
		latex rankingSummaryTableTeamsWrapped.tex && dvips -Ppdf rankingSummaryTableTeamsWrapped.dvi && \
		ps2pdf rankingSummaryTableTeamsWrapped.ps && popd
	mv ${tablesDir}/rankingSummaryTableTeamsWrapped.pdf $@
# summary of events in simulation table
${tablesDir}/simulationSummaryTable.pdf: ${simulationStatsTab}
	cat $< | ${binDir}/tab2tex.py --partitionEvery 10 | ${binDir}/latexWrapper.py > ${tablesDir}/simulationSummaryTableWrapped.tex
	pushd ${tablesDir} && latex simulationSummaryTableWrapped.tex && latex simulationSummaryTableWrapped.tex \
		latex simulationSummaryTableWrapped.tex && dvips -Ppdf simulationSummaryTableWrapped.dvi && \
		ps2pdf simulationSummaryTableWrapped.ps && popd
	mv ${tablesDir}/simulationSummaryTableWrapped.pdf $@
# list of participating teams table
${tablesDir}/participantsTable.pdf: ${participantsTableTex}
	cat $< | ${binDir}/replaceIDsWithNames.py | ${binDir}/latexWrapper.py > ${tablesDir}/participantsTableWrapped.tex
	pushd ${tablesDir} && latex participantsTableWrapped.tex && latex participantsTableWrapped.tex \
		latex participantsTableWrapped.tex && dvips -Ppdf participantsTableWrapped.dvi && \
		ps2pdf participantsTableWrapped.ps && popd
	mv ${tablesDir}/participantsTableWrapped.pdf $@

# correlations
${rankingsDir}/contigN50.txt: ${rankingsDir}/N50All.txt
	mkdir -p $(dir $@)
	awk -F'\t' '{print $$1,"\t",$$5}' $< | awk 'NR==1; NR>1 {print $$0 | "sort -k1"}' | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\n",$$1, $$2}' > $@.tmp
	mv $@.tmp $@
${rankingsDir}/scaffoldN50.txt: ${rankingsDir}/N50All.txt
	mkdir -p $(dir $@)
	awk -F'\t' '{print $$1,"\t",$$6}' $< | awk 'NR==1; NR>1 {print $$0 | "sort -k1"}' | \
		awk 'NR==1; NR>1 {printf "%s\t%.2e\n",$$1, $$2}' > $@.tmp
	mv $@.tmp $@

# rankings table, subset
${correlationsDir}/data.tab: ${binDir}/summarizeRankings.py ${rankingsFiles} ${rankingsDir}/scaffoldN50.txt ${rankingsDir}/contigN50.txt
	mkdir -p $(dir $@)
	${binDir}/summarizeRankings.py ${rankingsFiles} | head -1 | sed 's/#Assembly\t//' |\
		sed 's/Overall\t//' > $@.header.tmp
	${binDir}/summarizeRankings.py ${rankingsFiles} --retainValues --mode=s | sed '/^$$/d' | sort -k1 |\
		grep --invert-match '^#' | awk --field-separator '\t' '{print $$1, $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10}' |\
		perl -ple 's/^(\w\d+\s+)\d+\s+\(/$$1/' | perl -ple 's/\)$$//' | perl -ple 's/\)\s+\d+\s+\(/\t/g' > $@.tmp
	join ${rankingsDir}/contigN50.txt ${rankingsDir}/scaffoldN50.txt | join - $@.tmp |\
		awk '{print $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10, $$11}' > $@.tmpj
	cat $@.header.tmp | perl -ple 's/^/C_N50\tS_N50\t/' > $@.tmp
	cat $@.tmpj >> $@.tmp
	rm $@.tmpj $@.header.tmp
	mv $@.tmp $@

${correlationsDir}/correlationsPlot.pdf: ${correlationsDir}/data.tab ${binDir}/createPairCorrResidPlot.R
	mkdir -p $(dir $@)
	${binDir}/createPairCorrResidPlot.R $< ${binDir}/myPairs.R $(dir $@)
	mv ${correlationsDir}/residuals.pdf ${correlationsDir}/residualsPlot.pdf
	mv ${correlationsDir}/correlations.pdf $@

# absolute median differences of N50 and NG50
${projectDir}/nNGDiffs/contigNNGAbsDiffBp.txt: $(wildcard ${projectDir}/statsContigsContigPath/*.xml)
	mkdir -p $(dir $@)
	for f in statsContigsContigPath/*.xml; do  \
		calc $$( perl -ple 's/.*contigNG50="(\d+)".*/$$1/' < $$f)- \
		$$( perl -ple 's/.*contigN50="(\d+)".*/$$1/' < $$f) >> $@.tmp; done
	perl -ple 's/-//g;' -i $@.tmp
	mv $@.tmp $@
${projectDir}/nNGDiffs/contigNNGAbsDiffPercent.txt: $(wildcard ${projectDir}/statsContigsContigPath/*.xml)
	mkdir -p $(dir $@)
	for f in statsContigsContigPath/*.xml; do  \
		calc $$( perl -ple 's/.*contigNG50="(\d+)".*/$$1/' < $$f)/ \
		$$( perl -ple 's/.*contigN50="(\d+)".*/$$1/' < $$f) >> $@.tmp; done
	perl -ple 'if ($$_ < 1.0){ $$_ = 1.0 - $$_;}else{ $$_ -= 1.0;}' -i $@.tmp
	mv $@.tmp $@
${projectDir}/nNGDiffs/scaffoldNNGAbsDiffBp.txt: $(wildcard ${projectDir}/statsScaffoldsContigPath/*.xml)
	mkdir -p $(dir $@)
	for f in statsScaffoldsContigPath/*.xml; do  \
		calc $$( perl -ple 's/.*contigNG50="(\d+)".*/$$1/' < $$f)- \
		$$( perl -ple 's/.*contigN50="(\d+)".*/$$1/' < $$f) >> $@.tmp; done
	perl -ple 's/-//g;' -i $@.tmp
	mv $@.tmp $@
${projectDir}/nNGDiffs/scaffoldNNGAbsDiffPercent.txt: $(wildcard ${projectDir}/statsScaffoldsContigPath/*.xml)
	mkdir -p $(dir $@)
	for f in statsScaffoldsContigPath/*.xml; do  \
		calc $$( perl -ple 's/.*contigNG50="(\d+)".*/$$1/' < $$f)/ \
		$$( perl -ple 's/.*contigN50="(\d+)".*/$$1/' < $$f) >> $@.tmp; done
	perl -ple 'if ($$_ < 1.0){ $$_ = 1.0 - $$_;}else{ $$_ -= 1.0;}' -i $@.tmp
	mv $@.tmp $@
